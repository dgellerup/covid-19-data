#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Fri Sep  25 16:54:00 2020@author: dgelleru"""    import datetimeimport refrom bokeh.io import show, savefrom bokeh.models import (LogColorMapper, GeoJSONDataSource, CDSView, ColorBar, ColumnDataSource,                          CustomJS, CustomJSFilter, HoverTool, LinearColorMapper, Slider)from bokeh.palettes import Reds256 as palettefrom bokeh.plotting import figure, output_filefrom bokeh.sampledata.us_counties import data as countiesimport colorcet as ccimport geopandas as gpdimport matplotlib.pyplot as pltimport numpy as npimport pandas as pdimport requestsimport seaborn as snsimport covid_analysis as covdef __example_api_usage():    WI_COVID_API = "https://dhsgis.wi.gov/server/rest/services/DHS_COVID19/COVID19_WI/FeatureServer/10/query?"        """    example call https://dhsgis.wi.gov/server/rest/services/DHS_COVID19/COVID19_WI/FeatureServer/10/query?where=1%3D1&outFields=*&outSR=4326&f=json    another example where DEATHS > 500 and DEATHS <= 100000    https://dhsgis.wi.gov/server/rest/services/DHS_COVID19/COVID19_WI/FeatureServer/10/query?where=DEATHS%20%3E%3D%20500%20AND%20DEATHS%20%3C%3D%20100000&outFields=HOSP_NO,HOSP_UNK,POS_40_49,POS_50_59,POS_90,DEATHS,DTHS_FEM,DTHS_MALE,DATE,DTHS_70_79&outSR=4326&f=json        where 1=1 is an expression that will return true for every feature so this will retrieve all features form the layer    %20 is the space character    %3D is the = character    %3E is the > character    %3C is the < character    """        # Get all data from API, filter out State data. Only get 5 results because of data limit and counties are included.    wi_example = requests.get('https://dhsgis.wi.gov/server/rest/services/DHS_COVID19/COVID19_WI/FeatureServer/10/query?' \                'where=1%3D1&outFields=HOSP_NO,HOSP_UNK,POS_40_49,POS_50_59,POS_90,DEATHS,DTHS_FEM,DTHS_MALE,' \                'DATE,DTHS_70_79,GEOID,GEO,NAME,OBJECTID&outSR=4326&f=json').json()            wi_features = [item.get('attributes') for item in wi_example.get('features')]    wi_state = [item for item in wi_features if item.get('GEO') == "State"]        # This is the better API call that only returns State data. Get a lot more results because no counties.    wi_example = requests.get("https://dhsgis.wi.gov/server/rest/services/DHS_COVID19/COVID19_WI/FeatureServer/10/query?" \                              "where=GEO='STATE'&outFields=HOSP_NO,HOSP_UNK,POS_40_49,POS_50_59,POS_90,DEATHS,DTHS_FEM,DTHS_MALE," \                            "DATE,DTHS_70_79,GEOID,GEO,NAME,OBJECTID&outSR=4326&f=json").json()            wi_state = [item.get('attributes') for item in wi_example.get('features')]def create_timestamp(year, month, day):        date_object = datetime.datetime(year, month, day, 7, 0)        return str(date_object)def decode_timestamp(gis_date):        date_object = datetime.datetime.fromtimestamp(int(gis_date/1000))        #date_string = f"{date_object.year}-{date_object.month}-{date_object.day}%20" \                   # f"{date_object.hour:02}:{date_object.minute:02}:00"                       date_string = f"{date_object.year}-{date_object.month}-{date_object.day}"        return date_stringdef plot_deaths_by_gender():        response = requests.get("https://dhsgis.wi.gov/server/rest/services/DHS_COVID19/COVID19_WI/FeatureServer/10/query?" \                          "where=GEO='STATE'&outFields=DTHS_FEM,DTHS_MALE," \                        "DATE&outSR=4326&f=json").json()        gender_deaths = [item.get('attributes') for item in response.get('features')]        gender_deaths_df = pd.DataFrame(gender_deaths)    gender_deaths_df['DATE'] = gender_deaths_df['DATE'].apply(decode_timestamp)    gender_deaths_df.sort_values('DATE', inplace=True)        melted = pd.melt(gender_deaths_df, 'DATE', var_name='Gender', value_name='Deaths')    melted['Gender'] = melted['Gender'].apply(lambda x: 'Male' if 'MALE' in x else 'Female')        plt.figure(figsize=(12, 6))        sns.lineplot('DATE', 'Deaths', hue='Gender', data=melted)        plt.ylabel('Deaths')    plt.xlabel('Date')    plt.tight_layout()        def get_underlying_conditions():        response = requests.get("https://dhsgis.wi.gov/server/rest/services/DHS_COVID19/COVID19_WI/FeatureServer/10/query?" \                          "where=GEO='STATE'&outFields=PCT_SMK,PCT_COPD,PCT_CVD,PCT_DIAB,DEATHS," \                        "DATE&outSR=4326&f=json").json()        underlying_conditions_deaths = [item.get('attributes') for item in response.get('features')]        underlying_conditions_df = pd.DataFrame(underlying_conditions_deaths)    underlying_conditions_df['DATE'] = gender_deaths_df['DATE'].apply(decode_timestamp)    underlying_conditions_df.sort_values('DATE', inplace=True)        melted = pd.melt(gender_deaths_df, 'DATE', var_name='Gender', value_name='Deaths')    melted['Gender'] = melted['Gender'].apply(lambda x: 'Male' if 'MALE' in x else 'Female')        plt.figure(figsize=(12, 6))        sns.lineplot('DATE', 'Deaths', hue='Gender', data=melted)        plt.ylabel('Deaths')    plt.xlabel('Date')    plt.tight_layout()def plot_stats_linearscale(self, statistics_df: pd.DataFrame, show_plot=False):            stats_df = statistics_df.reset_index()        stats_df['color'] = ["#F1E678", "#ED8F60", "#ED8F60", "#BF406C", "#BF406C", "#BF406C", "#BF406C", "#682A6#", "#2B1F46"]        yrange = (0, 1.1 * max(stats_df['total']))    assay = stats_df['index']        source = ColumnDataSource(stats_df)        TOOLS = "hover,save,pan,reset,wheel_zoom"        TOOLTIPS = """        <div>            <div>                <span style="color: #0066ff; font-weight: 700;">Assay: </span><span>@index</span><br>                <span style="color: #0066ff; font-weight: 700;">Assay Total: </span><span>@total</span><br>                <span style="color: #0066ff; font-weight: 700;">Sample Mean: </span><span>@mean</span><br>                <span style="color: #0066ff; font-weight: 700;">Sample Min: </span><span>@min</span><br>                <span style="color: #0066ff; font-weight: 700;">Sample Max: </span><span>@max</span><br>                <br>                <span style="color: #0066ff; font-weight: 700;">Top Targets:</span><br>                @top_targets{safe}            </div>        </div>    """        plot = figure(x_range=assay, y_range=yrange, title='Assay Report',                  plot_height=600, plot_width=1200, tools=TOOLS,                  toolbar_location='below', tooltips=TOOLTIPS)            plot.vbar(x='index', top='total', bottom=0, color='color', source=source, fill_alpha=0.9, line_width=0)    plot.yaxis.axis_label = "Assay Totals Linear Scale"    #plot.yaxis.minor_tick_line_color = None    plot.xaxis.axis_label = "Assay"    plot.yaxis.formatter.precision = 1            if not show_plot:        save(plot, filename='compiled_results/groups_figure_linear.html', title="Groups Figure (linear)")    else:        show(plot)def make_nice_wi_gif(new_cases=False):        state_data = load_state_data()    state_data = state_data[state_data['state'] == 'Wisconsin']    wi_state = get_data_since_date(state_data, '2020-03-08')        county_data = load_county_data()    state_df = county_data[county_data['state'] == 'Wisconsin']                state_df['short_fips'] = state_df['fips'].apply(lambda x: int(str(int(x))[2:]))        state_df = get_data_since_date(state_df, '2020-03-08')        state_df['new_cases_per_10k'] = state_df['new_cases'] / (state_df['population']/10000)        state_df['cases_per_10k'] = state_df['cases'] / (state_df['population']/10000)        if new_cases:        vmin, vmax = 0, state_df['new_cases_per_10k'].max()        colormap = 'Reds'    else:        vmin, vmax = 0, state_df['cases_per_10k'].max()        colormap = 'Reds'            basepath = os.path.join(os.getcwd(), 'resources/shapefiles/Wisconsin')    plotpath = os.path.join(os.getcwd(), 'plots/wisconsin')        if not os.path.exists(basepath):        os.makedirs(basepath)            if not os.path.exists(plotpath):        os.makedirs(plotpath)            shapefile = list(filter(lambda x: x.endswith('.shp'), os.listdir(basepath)))[0]        shapefile_path = os.path.join(basepath, shapefile)        map_df = gpd.read_file(shapefile_path)    map_df['COUNTY_FIP'] = map_df['COUNTY_FIP'].astype(int)            images = []        plot_dates = sorted(list(set(state_df['date'])))    plot_dates = [plot_dates[i] for i in range(0, len(plot_dates), 3)]        for date in plot_dates:            wi_state['era'] = wi_state['date'].apply(lambda x: 'old' if x <= date else 'new')                winow = state_df[state_df['date'] == date]        merged = map_df.set_index("COUNTY_FIP").join(winow.set_index('short_fips'))                #merged['cases'] = merged['cases'].apply(lambda x: 0 if pd.isnull(x) else x)                variable = 'cases_per_10k' if new_cases == False else 'new_cases_per_10k'                fig, (ax0, ax1) = plt.subplots(2, 1, gridspec_kw={'height_ratios': [4, 1]}, figsize=(9, 9))                ax0.set_aspect('equal')                merged.plot(column=variable,                    cmap=colormap,                    linewidth=0.8,                    ax=ax0,                    edgecolor='0.8',                    vmin=vmin,                    vmax=vmax,                    missing_kwds={"color": "lightgrey"},                    figsize=(6, 2))                ax0.axis('off')                # add a title        if new_cases:            ax0.set_title(f"New Cases per 10K People {date}",                          fontdict={'fontsize': '18', 'fontweight': '3'})        else:            ax0.set_title(f"Cases per 10K People {date}",                          fontdict={'fontsize': '18', 'fontweight': '3'})                # create an annotation for the data source        ax0.annotate('Source: The New York Times, 2020',                    xy=(0.1, 0.08),                    xycoords='figure fraction',                    horizontalalignment='left',                     verticalalignment='top',                    fontsize=12,                    color='#555555')                # Create colorbar as a legend        sm = plt.cm.ScalarMappable(cmap=colormap, norm=plt.Normalize(vmin=vmin, vmax=vmax))                # empty array for the data range        sm._A = []                # add the colorbar to the figure        cbar = fig.colorbar(sm, ax=ax0)                sns.lineplot('date', 'cases', data=wi_state, ax=ax1, color='coral')        plt.fill_between(wi_state.date.values, wi_state.cases.values, color='coral')        plt.axvline(date)        ax1.spines['top'].set_visible(False)        ax1.spines['right'].set_visible(False)        ax1.spines['bottom'].set_visible(False)        ax1.spines['left'].set_visible(False)        ax1.axes.get_xaxis().set_visible(False)        ax1.set_ylabel('State Cases')                fig.savefig(os.path.join(plotpath, f'counties_{date}.png'), dpi=300)                        plt.close(fig)                    images.append(os.path.join(plotpath, f'counties_{date}.png'))            images = sorted(images)        gif_images = [imageio.imread(image) for image in images]        imageio.mimsave('plots/wisconsin_new_cases.gif', gif_images, duration=0.5)        def interactive_map(wi_data):        pop = cov.population_data[cov.population_data['STNAME'] == 'Wisconsin']    pop['geoid'] = pop['COUNTY'].apply(lambda x: int(f"55{x:0>3}"))    pop = pop[['geoid', 'POPESTIMATE2019']]        my_palette = tuple(reversed(palette))        my_palette = palette        now_data = wi_data[wi_data['date'] == '2020-11-09']        wisconsin = gpd.read_file('resources/shapefiles/Wisconsin/County_Boundaries_24K.shp')        wisconsin['geoid'] = wisconsin['COUNTY_FIP'].apply(lambda x: int(f"55{x:0>3}"))    wi_df = wisconsin.merge(now_data, right_on='geoid', left_on='geoid')    wi_df = wi_df[['name', 'geoid', 'date', 'positive', 'pos_new', 'deaths', 'dth_new', 'SHAPEAREA', 'SHAPELEN', 'geometry']]        covid_wi = wi_df.merge(pop, right_on='geoid', left_on='geoid')        covid_wi['cases_per_10k'] = round(covid_wi['positive'] / (covid_wi['POPESTIMATE2019']/10000), 1)        geosource = GeoJSONDataSource(geojson=covid_wi.to_json())    color_mapper = LinearColorMapper(palette=my_palette)        # Create figure object.    p = figure(title = None,               plot_height = 900,               plot_width = 825,               x_axis_location=None, y_axis_location=None,               toolbar_location = None)        p.grid.grid_line_color = None    p.outline_line_width = 0        # Add patch renderer to figure.    states = p.patches('xs','ys', source = geosource,                       fill_color = {'field': 'cases_per_10k', 'transform': color_mapper},                       line_color = 'black',                        line_width = 0.5,                       fill_alpha = 0.8)        # Create hover tool    p.add_tools(HoverTool(renderers = [states],                          tooltips = [('County','@name'),                                    ('Cases','@positive'),                                    ('Per 10k', '@cases_per_10k{0.0}')]))            output_file('plots/wi_interactive.html')    show(p)            def main():        wi_data = pd.read_csv('https://opendata.arcgis.com/datasets/5374188992374b318d3e2305216ee413_12.csv?outSR=%7B%22latestWkid%22%3A3857%2C%22wkid%22%3A102100%7D')        wi_data.columns = [x.lower() for x in wi_data.columns]        wi_data['date'] = wi_data['date'].apply(lambda x: x.split(" ")[0])    wi_data['date'] = wi_data['date'].apply(lambda x: re.sub('/', '-', x))        #wi_relevant = cov.get_data_since_date(wi_data, '2020-03-10')        interactive_map(wi_data)                                